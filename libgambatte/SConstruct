import os, sys

vars = Variables()
vars.Add('CC')
vars.Add('CXX')

# Support building executable for MSVC x86
if sys.platform == 'win32':
    global_cflags = ARGUMENTS.get('CFLAGS', '-O2')
    global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags)
    global_defines = ' -DHAVE_STDINT_H'

    zlib_path = os.path.join('..', 'msvc', 'zlib', 'include')
    cpp_path = ['src', 'include', '../common', zlib_path]
    env = Environment(CPPPATH = cpp_path,
                      CFLAGS = global_cflags + global_defines,
                      CXXFLAGS = global_cxxflags + global_defines,
                      TARGET_ARCH = 'x86',
                      variables = vars)

else:
    global_cflags = ARGUMENTS.get('CFLAGS', '-Wall -Wextra -O2 -fomit-frame-pointer')
    global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags + ' -fno-exceptions -fno-rtti')
    global_defines = ' -DHAVE_STDINT_H'

    env = Environment(CPPPATH = ['src', 'include', '../common'],
                      CFLAGS = global_cflags + global_defines,
                      CXXFLAGS = global_cxxflags + global_defines,
                      variables = vars)

sourceFiles = Split('''
            src/bitmap_font.cpp
            src/cpu.cpp
            src/gambatte.cpp
            src/initstate.cpp
            src/interrupter.cpp
            src/interruptrequester.cpp
            src/loadres.cpp
            src/memory.cpp
            src/sound.cpp
            src/state_osd_elements.cpp
            src/statesaver.cpp
            src/tima.cpp
            src/video.cpp
            src/mem/cartridge.cpp
            src/mem/huc3.cpp
            src/mem/memptrs.cpp
            src/mem/pakinfo.cpp
            src/mem/rtc.cpp
            src/mem/sgb.cpp
            src/mem/time.cpp
            src/sound/channel1.cpp
            src/sound/channel2.cpp
            src/sound/channel3.cpp
            src/sound/channel4.cpp
            src/sound/duty_unit.cpp
            src/sound/envelope_unit.cpp
            src/sound/length_counter.cpp
            src/video/ly_counter.cpp
            src/video/lyc_irq.cpp
            src/video/next_m0_time.cpp
            src/video/ppu.cpp
            src/video/sprite_mapper.cpp
           ''')

conf = env.Configure()

if sys.platform == 'win32':
    sourceFiles.append('../msvc/src/time/gettimeofday.c')

if conf.CheckHeader('zlib.h'):
    sourceFiles.append('src/file/unzip/unzip.c')
    sourceFiles.append('src/file/unzip/ioapi.c')
    sourceFiles.append('src/file/file_zip.cpp')
else:
    sourceFiles.append('src/file/file.cpp')

conf.Finish()

def rev():
    try:
        from subprocess import check_output, CalledProcessError
        stdout = check_output(['git', 'rev-list', 'HEAD', '--count'])
        return ' -DREVISION=' + stdout.decode().strip()
    except (OSError, CalledProcessError):
        return ' -DREVISION=-1'

# Static Library
lib = env.Library('gambatte', sourceFiles)
env.Default(lib)

# Shared Library (except for MSVC, for sake of simplicity)
if sys.platform != 'win32':
    sys_libs = ['z']
    if sys.platform == 'darwin':
        sys_libs.append('System')

    shlib = env.SharedLibrary('gambatte', sourceFiles + ['src/cinterface.cpp'],
                              CXXFLAGS = env['CXXFLAGS'] + rev(),
                              LINKFLAGS = env['LINKFLAGS'] + ' -s',
                              LIBS = sys_libs,
                              SHLIBPREFIX = "lib")
    env.Alias('shlib', shlib)
